빌더 패턴
-복잡한 단계가 있는 인스턴스 생성과정 단순화

학습 목표
-복잡한 단계가 필요한 인스턴스 생성을 빌더 패턴을 통해서 구현할 수 있다.

첫번째로 보여주는 빌더 패턴은 코드 상의 구현, 두 번째는 실무에서 사용되는 모습

빌더 패턴
-복잡한 단계를 거쳐야 생성되는 객체의 구현을 서브 클래스에게 넘겨주는 패턴

무언가를 만들고 싶은데, 그 무언가는 상당히 복잡한 알고리즘에 따라 만들어진다. 따라서
서브 클래스에서 구현을 맡고, 복잡한 과정을 추상화하여 만들도록 하는 것이 빌더 패턴의 목적

기본적인 틀이 있긴 하지만, 다양한 방식이 있어서 어떻게 동작하는지 알아서 원하는 방식으로 구현하는 것이 좋다.

-src 코드에서
복잡한 단계를 거쳐야 하는 객체를 computer라고 만들자

이미지 기본 설꼐에서
Director는 만들어주는 객체 -> 우리에서는 factory이다.
Builder를 받는데, -> 우리는 BluePrint 객체 -> 기본적인 설계도, 어떤 부분이 필요한지 적힌 메서드
그리고 구체적인 구현을 담당하는 메서드 ConcreteBulder -> 우리는 LGgram객체와 같다.

factory는 설계도를 가지고 있고, 그 설계도의 로직에 따라 객체를 만든다
다형성을 위해 설계도를 받지만, 그 구현체를 직접 받아야한다.(LGgram)
그 설계도에 따라 객체(computer)를 만들었다면, 내 보낼 수 있도록 한다.

복잡하게 생성되어야 하는 객체를 다른 객체에게 생성 책임을 떠넘겨서 보기 좋게 생성하는 것이
빌더 패턴의 목적이다.
