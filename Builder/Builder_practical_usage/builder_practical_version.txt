빌드 패턴이 실무에서 사용되는 버전이다.
많은 변수를 가진 객체의 생성을 가독성 높도록 코딩 할 수 있다.

키워드
-가독성과 많은 맴버 변수이다.

즉 빌더 패턴은 많은 인자를 가진 객체 생성을 다른 객체의 도움으로 생성하는 패턴이다.

-실제 코드로 만들어보자
만약 컴퓨터의 맴버 변수가 100개 쯤된다면 어떻게 생성해야 할까??
빌더를 만들자

빌더 패턴은 소프트웨어 디자인 패턴이다. 오브젝트를 구성하는 추상화 스텝에 의도를 둔다. 다른 오브젝트를 생성하기 위해 추상화된 스텝의 다른 구현들을 활용한다.



Builder Pattern vs Factory method pattern
우리는 빌더 패턴과 팩토리 메소드 패턴을 사용하기 위한 결정을 할 때 항상 의문점을 가지게 된다.  .
팩토리는 단순히 생성자와 관련된 랩퍼 함수이다. 팩토리 매서드 패턴에서는 전체 오브젝트를 위한 한번의 함수 호출이 요구된다. 하나의 라인에 모든 파라미터들이 전달되어야 하며 최종 오브젝트가 리턴될 것이다.
실제 생활에서 예를 찾아보면 레스토랑의 오늘의 식사와 같다. 식사의 생성은 팩토리 패턴이다. 때문에 우리는 주문할때 오늘의 식사를 달라고 하고 이러한 오브젝트는 비밀의 기준에 의해 생성된 식사를 제공한다.
빌더 패턴은 생성자를 위해 전달가능한 모든 파라미터의 래퍼 오브젝트이다. 여기서는 생성을 위한 파라미터를 전달하기 위한 세터가 허용된다.
실제 생활에서의 예는 커스텀 피자이다. 이 경우 추가 치즈라던지, 올리브, 옥수수들을 커스터마이징 할 수 있다. 그러므로 필더는 생성될 오브젝트가 가질 수 있는 어트리뷰트들을 노출하고 생성 과정은 감춘다.
출처: https://opennote46.tistory.com/217 [욱'S 노트]

즉, 팩토리 메서드는 객체 전체에 대한 랩퍼라면, builder는 생성자 전달, 맴버 변수에 대한 랩퍼라는 것이다.
팩토리는 일정한 알고리즘(템플릿 패턴)으로 만들어지는 객체의 추상화를 위해 사용되는 반면
빌더 패턴은 팩토리 패턴과 더불어, 생성에 있어서의 가독성, 생성을 위한 파라미터 전달을 단순화하고 추상화하기
위해서 사용한다.

주로, 팩토리 메서드로 간단히 구현했다가 빌더 패턴으로 변하는 경우가 많다.
