-프로토 타입 패턴
프로토 타입 패턴을 통해서 복잡한 인스턴스를 복사할 수 있다.

장점 : 생산 비용이 높은 인스턴스를 복사를 통해서 쉽게 생성할 수 있도록 하는 패턴
-인스턴스 생산 비용이 높은 것들
    1,종류가 너무 많아서 클래스로 정리되지 않는 경우
    2,클래스로부터 인스턴스 생성이 어려운 경우 -> 예제

-기본 설계
interface로 선언된 base 인터페이스에서 clone이라는 메서드가 있고, 이를 구현하는 하위 클래스에서
clone 메서드를 이용하여 객체를 복사할 수 있는 것이다.

요구 사항
-일러스트레이터와 같은 그림 그리기 툴을 개발 중입니다. 어떤 모양을 그릴 수 있도록 하고
복사 붙여넣기 기능이 있도록 해주세요.

Cloneable 이라는 인터페이스를 implements 해야 clone이라는 메서드를 사용할 수 있도록 하였다.
clone메서드를 사용하면 해당 객체를 복사해서 사용 가능하다.

-> 실제로 도형을 똑같이 복사하려면, 개고생을 해야한다.
왜냐하면, 너무 많은 내용들이 있으니까, 그런데, clone이 있다면 똑같이 복사가 된다.

추가 요구 사항
- 복사 후 붙여넣기를 하면 두 도형이 겹치는 데, 안겹치도록 살짝 옆으로 이동하게 해주세요.
copy메서드에서 해주자.

핵심적인 부분
복사할 수 있게끔 하고, 복사를 사용하는 것!

-위키
프로토타입 패턴은 생산 디자인 패턴인데, 원형 인스턴스에 의해 객체의 자료형이 결정될 때, 사용된다.
이 객체는 새로운 객체를 만들기 위해 복사되는 것이다.

이것은 팩토리 패턴에서 하는 것과 같이 클라이언트 어플리케이션에서, object creator와 같은 하위 클래스를 만들고 싶지 않을 때,
또, 주어진 어플리케이션에서 new 키워드로 새로운 객체를 만드는 내재적인 비용이 많이 들 때 사용한다.
(즉 새로운 객체를 만들고 거기에 복사하려는 객체의 내용을 입력하는 것이 비용이 많이 들 때 이다.)
