-템플릿 메소드
- 공통적인 프로세스 묶어주기

학습 목표
1, 일정한 프로세스를 가진 요구사항을 템플릿 메서드를 이용하여 구현할 수 있다.

사전적 의미의 template란??
-모양자와 같은 것들이다.
이미 별, 사각형, 동그라미가 모양자에 박혀있어 거기에 펜을 그리면 모양이 다르게 나온다.

-템플릿 메서드 패턴이 원하는 개념은 모양자로만 설명하기는 힘들다.
-스텝 패턴이라고 보는게 좋다.

-template method pattern
알고리즘의 구조를 메소드에 정의하고, 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 재정의하는 패턴

템플릿 메서드 패턴은 어떨 때 사용?
-구현하려는 알고리즘이 일정한 프로세스가 있다.
    일정 단계가 있다는 것이다.

-구현하려는 알고리즘이 변경 가능성이 있다.
    변경 가능성이 중요

템플릿 메서드를 사용할 때 어떤 단계로??
1, 알고리즘을 여러 단계(스텝)으로 나눈다.
2, 나눠진 알고리즘 단계를 메서드로 선언한다.
3, 알고리즘을 수행할 템플릿 메서드를 만든다.
4, 하위 클래스에서 나눠진 메서드를 구현한다.

-알고리즘을 여러 단계로 나누고,
스텝 1, 스텝 2, 스텝 3로 나눈다.
operation1(), operation2(), operation3()
그 알고리즘을 templateMethod()에서 호출해준다. operation1(), operation2(), operation3()을 다 호출해주는 것이다.

그리고 하위 클래스
ConCrete Class에서
operation1(), operation2(), operation3()을 구현해준다.

예제 코드를 만들어보자

요구사항
-신작 게임의 접속을 구현해주세요
requestConnection(String str) : String

-유저가 게임 접속시 다음을 고려해야 합니다.
    -보안 과정 : 보안 관련 부분을 처리
        doSecurity(String string) : String
    -인증 과정 : user name과 password가 일치하는지 확인합니다.
        authentication(String id, String password) : boolean
    -권한 과정 : 접속자가 유료 회원인지 무료회원인지 게임 마스터 인지를 확인 합니다.
        authoriztion(String userName) : int
    -접속 과정 : 접속자에게 커넥션 정보를 넘겨줍니다.
        connection(String info) : String

1, 우리는 접속이라는 알고리즘
2,  여러 단위로 나뉘게 된다. - 보안, 인증, 권한, 접속 -> 각 메서드가 만들어짐
3, 알고리즘을 수행할 템플릿 메서드 -> requestConnection
4, 하위 클래스에서 나눠진 메서드를 구현한다. -> 구현에 따라 달라진다.

클래스 이름 만들 때, 주의할 것!!
Abst로 추상 클래스인지를 표시하고, 거기에 대한 하위 클래스는 Default로 이름을 붙여준다.

requestConnection 템플릿 메서드가 각 알고리즘 단계들을 수행하고,
그 알고리즘 단계들의 구현은 다른 하위 클래스에서 해준다.

-더, 공부해보자, 추가적인 요구사항이 들어왔다.
보안 부분이 정부 정책에 의해서 강화되었다. 강화된 방식으로 코드를 변경해야한다.
    여가부에서 밤 10시 이후에 게임 접속이 제한되도록 만들었다는 것이다. -> shutdown제도

DefaultGameConnectionHelper로 가서 구현 메서드에 알고리즘을 추가하면 된다.

만약, 스텝 알고리즘들을 템플릿 메서드에 쓰지 않고, 한 번에 만들어 놓았다면 굉장히 힘들었을 것이다.
즉, requrestConnection안에 모든 알고리즘을 구현해 놓았다면, 복잡했을 것이다.

또는 구현체를 따로 두지 않고, AbstGameConntctionHelper에 모든 구현들을 정의해 놓으면
delegate되지 않은 문제가 생겨서, 매번 메서드들을 그때 그때 마다 바꾸어 주어야한다.
즉, 템플릿 메서드 안에 있는 스텝 메서드들이 만약 게임 약관 이전이나, 기술이 달라지게 되면,
구현체만 바꾸는 Strategy패턴이 적용되면 굉장히 간단하게 구현할 수 있다.

템플릿 메서드 패턴으로 구현하게 되면, 기능과 구현이 나누어지는
interface 패턴과 구현체를 매번 바꿀 수 있는 delegate 패턴을 가지고 있고,
template 메서드에 해당 스텝 메서드를 넣어, 알고리즘 단계들이 서로 엇갈리지 않고,
변경이 있을 시에, 알고리즘 단계(구조)의 변경없이 오직 구현체의 변경만으로 알고리즘 구현을 변경하는 것이다.

만약, 내가 하루 템플릿이
밥 -> 공부 -> 잠
인데, 먹는 밥은 쌀밥, 공부는 컴퓨터 공학, 잠은 침대 인데,
군대에 가게되어 구현 알고리즘이 변경되었다 하자
밥은 콩밥, 공부는 박격포, 잠은 침상 이라면,
알고리즘 구조 ( 밥 -> 공부 -> 잠) 은 변하지 않되
구현 메서드만 바꾸어 주면 된다.(delegate 기능 + interface 기능)
알고리즘 단계를 변경하지 않는 것이 template 패턴이다.

-일정한 프로세스를 가진 요구사항을 템플릿 메서드를 통해서 구현할 수 있다.
-구현하려는 알고리즘이 일정한 프로세스가 있다.
-구현하려는 알고리즘이 변경하려는 가능성이 있다.

