학습 목표
1,인터페이스 개념을 이해
2,델리게이트 개념을 이해
3,전약 패턴을 이해

-1, 인터페이스
키보드나 디스플레이 따위 처럼 사람과 컴퓨터를 연결하는 장치
두 객체 간의 연결을 해주는 접정을 인터페이스라 할 수 있다.

-2 자바에서의 인터페이스
    기능에 대한 선언과 구현 분리
    기능을 사용하는 통로

    즉 기능은 따로 어딘가에 명세를 쓰고, 구현은 어딘가에 쓴다;

    기능으 interface가 되고, 구현이 class가 되는 것이다.

A라는 기능이 필요해서
Ainterface를 만든다. 여기서 A기능을 선언해준다.
인터페이스를 통해 기능에 대한 선언을 해준다.

그럼 구현은 ?? class에서 이런 인터페이스를 구현하면 된다,
AInterfaceImplements 클래스를 만들어 여기에서 구현을 한다.

인터페이스의 기능
1,선언과 구현을 분리해줄 수 있는 기능을 한다.
2, 두번째로 통로가 된다.

인터페이스는 그 자체로는 사용이 불가능하다.
기능만 선언이 되어 있으니, 구현체가 new () 로 들어와야한다.
그게 아까만든 AInterfaceImplements 클래스이다.

인터페이스
        Ainterface ainterface = new AInterfaceImplements();
        ainterface.funcA();

        ainterface를 사용해서 AAA를 출력한다.
        인터페이스는 기능을 사용하는 통로 기능을 하는 것이다.


-2, delegate(위임 하다)
두 객체간의 관계에서 delegate하다고 한다.
AObj를 하나 만들어 주자

여기서 프린트 출력이 필요한데, 이 기능을 다른 객체에서 해주고 잇다.
한 객체에서 필요한 기능을 다른 객체를 통해서 사용하는 것,
그 기능을 떠넘기는 것, 그것을 위임한다고 표현한다.

정리:
1, 인터페이스 : 기능과 선언을 분리, 어떤 기능을 호출하는 통로
2, 델리게이트 : 특정 객체의 기능을 사용하기 위해, 다른 객체를 호출하는 것이다.

그럼 스트레티지 패턴은 무엇인가??
여러 알고리즘을 하나의 추상적인 접근점을 만들어 접근 점에서 서로 교환 가능하도록 하는 패턴
    -여기서 추상적인 접근점이 인터페이스, 서로 교환가능이  delegate이다.

보통 이런 방식이다.
[client 객체가 strategy객체를 가지고 있고, setter가 있다.]
[이 strategy객체는 인터페이스로 a, b , c strategy 객체들이 상속하고 있다.
client는 setStrategy라는 setter를 통해서 , a b c strategy 객체들을 주입할 수 있다.

코드로 보자
요구사항 - 신작 게임에서 캐릭터와 무기를 구현
무기는 두 가지 종류 칼, 검이 있다.

무기는 -> 여러 알고리즘이다. 여러개가 들어갈 수 있는 것들이다.
strategy전략이 사용된다.

이게 무슨 이점이 있는가??
유지 보수에서 굉장한 이점이 있다.
유지 보수 요청 - 무기 중에서 도끼를 추가해주세요.

도끼 클래스만 만들어주면 된다.
우리는 다른 것들 바꾸어 준게 없다.
