사전적 의미의 Adapter란??

기계, 기구 등을 다목적으로 사용하기 위한 부가 기구
(기계랑 기구는 이미 있고, 그것을 부가적으로 사용하는 것(부가 기부가 adapter)

즉, 220v 전류가 흐르는 콘센트에 110v가 흐르도록 어댑터를 끼우는 것

-기본 설계

이미 주어진 Adaptee라는 알고리즘을
Adapter를 통해서 client에 의해 변형되어 제공된다.

client <- adapter <- adapter <- adaptee

-요구사항
두 수에 대한 다음의 연상을 수행하는 객체를 만들어라
    -수의 두배의 수를 반환 : twice(float):float
    -수의 반을 나눈 수를 반환 : halfOf(float):float
   -구현의 객체 이름은 Adapter로 해준다.
   -Math 클래스에서 이미 두배를 구하는 함수와, 두배를 나누는 힘수가 이미 구현되어 있다.

이미 구현되어 있지만, Double이다.

구현과 선언을 분리해주기 위해서,
Adapter를 만들어 선언해주고, AdapterImplements를 만들어 구현한다.
그 다음 main으로 가서 implements를 넣어준다.

이렇게, 미리 주어진 함수인 Math를 바로 사용할 수 없기 때문에,
요구 사항에 맞추어 변경하기 위해서 adapter를 사용하는 것이다.

더 공부해보자

-알고리즘 변경
    -Math 클래스에 새롭게 두 배를 구할 수 있는 함수가 추가됨
    -새로 구현된 알고리즘을 이용하도록 프로그램을 수정
    -절반을 구하는 기능에서 로그를 찍는 기능을 추가해주기

Math클래스의 doubled메서드가 새롭게 두배를 구할 수 있는 함수,
똑같지만, 바뀌었다고 가정하자

그러면, 우리가 어떻게해야하나??
Main함수를 바꾸지 않고 가능하다.
implements에 가서, Math함수 사용을 doubled로 바꾸기만 하면 된다.

main클래스, math(알고리즘) 코드를 수정하지 않아도, implements(구현체)를 변경하는 것 만으로도
원하는 목표를 이룰 수 있다.

-만약, 내가 버블 솔트가 필요한데, 누가 그 코드를 주었는데, 그게 배열로된 버블 솔트였다
-그래서 adapter를 통해서 배열을 리스트로 바꾸고(구현체), 사용하는 것이다.

이렇게 기존에 있던 알고리즘을 변형해서 사용하는 것이 adapter의 핵심이다.
