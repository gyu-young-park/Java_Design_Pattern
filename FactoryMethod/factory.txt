팩토리 메서드 패턴

학습 목표
    -팩토리 메서드 패턴에서 템플릿 메서드 패턴의 사용됨을 안다.
    -팩토리 메서드 패턴에서의 구조와 구현의 분리를 이해하고, 구조와 구현의 분리의 장점을 안다.

이전 템플릿 메서드 패턴을 학습 했다.
간단히 다시 말하자면,
-어떤 알고리즘을 여러 단계의 스텝으로 나누고, 나눠진 스텝 별로 메서드를 선언하고 하위 클래스에서 그 메서드의 구현을 하는 패턴이였다.

-모든 패턴의 목표
구조와 기능의 분리
구조와 기능을 분리하는 것이 조금 더 flexible하게 코드를 짤 수 있다.

기본 설계 - 이미지를 보자

우리가 필요한 어떤 생산품
Product라는 인터페이스를 생산하는 객체가 있을 것이다.
Creator라는 객체가 Product객체를 생산한다.

Creator라는 클래스에는
create() : item 이있다.(메서드)

Product 인터페이스에는
use() : void 라는 메서드가 있다.

굉장히 기본적인 팩토리 골격이다.
팩토리 메서드에서 생각해야 할 것은 create()라는 메서드가
템플릿 메서드 처럼 여러단계로 나눠질 수 있는 경우가 있다는 것이다.
그게
op1() : void
op2() : void
createProduct() : item

가령, db에서 값을 가져옴
그 값으로 생산품을 만듦
그 생산 품을 장부에 저장

이런 식으로 템플릿 메서드 방식을 사용할 수 있다.
사용하는 알고리즘을 여러 단계로 나누어 하위 클래스에서 각각의 메서드를 구현하는 방식
팩토리 메소드 패턴이 템플릿 메서드를 사용할 수 있다.

-요구 사항
게임 아이템과 아이템 생성을 구현해주세요
    -아이템을 생성하기 전에 데이터 베이스에서 아이템 정보를 요청합니다.
    -아이템을 생성한 후에 아이템 복제 등의 불법을 방지하기 위해 데이터 베이스에 아이템 생성 정보를 남깁니다.

아이템을 생성하는 주체를 itemCreator로 이름을 짓습니다.
ㅇ
아이템은 item이라는 interface로 다룰 수 있도록 합니다.
    item은 use함수를 기본 함수로 갖고 있습니다.

현재 아이템의 종류는 체력 회복 물약, 마력 회복 물약이 있습니다.

장점
우리가 다른 아이템을 생성할 때, factory 메서드가 있는 클래스를 상속해서 구현해버리면
바꿀거 없이 새로운 아이템을 만들수 잇다.

또, create알고리즘이 변하여 모든 item에 적용해야할 때도 factory메서드에 있는
템플릿 메서드 패턴이 적용된 부분만 변경하면 모두 다 적용되기 때문에 좋다.
구조와 구현의 분리가 핵심이다.

인터넷 정의:
A Factory Pattern or Factory Method Pattern says that just define an interface or abstract class for creating an object but let the subclasses decide which class to instantiate. In other words, subclasses are responsible to create the instance of the class.

The Factory Method Pattern is also known as Virtual Constructor.